/// <reference types="node" />
import { Logger } from '@nestjs/common/services/logger.service';
import { EventEmitter } from 'events';
import { Observable } from 'rxjs';
import { ClientOptions, ReadPacket } from '../interfaces';
import { WritePacket } from './../interfaces';
import { ClientProxy } from './client-proxy';
export declare class ClientRMQ extends ClientProxy {
    protected readonly options: ClientOptions['options'];
    protected readonly logger: Logger;
    protected connection: Promise<any>;
    protected client: any;
    protected channel: any;
    protected urls: string[];
    protected queue: string;
    protected queueOptions: any;
    protected responseEmitter: EventEmitter;
    constructor(options: ClientOptions['options']);
    close(): void;
    consumeChannel(): void;
    connect(): Promise<any>;
    createChannel(): Promise<void>;
    createClient<T = any>(): T;
    mergeDisconnectEvent<T = any>(instance: any, source$: Observable<T>): Observable<T>;
    setupChannel(channel: any, resolve: Function): Promise<void>;
    handleError(client: any): void;
    handleMessage(packet: WritePacket, callback: (packet: WritePacket) => any): void;
    protected publish(message: ReadPacket, callback: (packet: WritePacket) => any): Function;
    protected dispatchEvent(packet: ReadPacket): Promise<any>;
}
