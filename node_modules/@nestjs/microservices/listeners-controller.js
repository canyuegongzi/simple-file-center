"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const context_id_factory_1 = require("@nestjs/core/helpers/context-id-factory");
const metadata_scanner_1 = require("@nestjs/core/metadata-scanner");
const listener_metadata_explorer_1 = require("./listener-metadata-explorer");
class ListenersController {
    constructor(clientsContainer, contextCreator, container, injector, clientFactory) {
        this.clientsContainer = clientsContainer;
        this.contextCreator = contextCreator;
        this.container = container;
        this.injector = injector;
        this.clientFactory = clientFactory;
        this.metadataExplorer = new listener_metadata_explorer_1.ListenerMetadataExplorer(new metadata_scanner_1.MetadataScanner());
    }
    bindPatternHandlers(instanceWrapper, server, moduleKey) {
        const { instance } = instanceWrapper;
        const isStatic = instanceWrapper.isDependencyTreeStatic();
        const patternHandlers = this.metadataExplorer.explore(instance);
        const module = this.container.getModuleByKey(moduleKey);
        const collection = module.controllers;
        patternHandlers.forEach(({ pattern, targetCallback, methodKey, isEventHandler }) => {
            if (isStatic) {
                const proxy = this.contextCreator.create(instance, targetCallback, moduleKey);
                return server.addHandler(pattern, proxy, isEventHandler);
            }
            server.addHandler(pattern, async (data) => {
                const contextId = context_id_factory_1.createContextId();
                const contextInstance = await this.injector.loadPerContext(instance, module, collection, contextId);
                const proxy = this.contextCreator.create(contextInstance, contextInstance[methodKey], moduleKey);
                return proxy(data);
            }, isEventHandler);
        });
    }
    bindClientsToProperties(instance) {
        for (const { property, metadata, } of this.metadataExplorer.scanForClientHooks(instance)) {
            const client = this.clientFactory.create(metadata);
            this.clientsContainer.addClient(client);
            this.assignClientToInstance(instance, property, client);
        }
    }
    assignClientToInstance(instance, property, client) {
        Reflect.set(instance, property, client);
    }
}
exports.ListenersController = ListenersController;
