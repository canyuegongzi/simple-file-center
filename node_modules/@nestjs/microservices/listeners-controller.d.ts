import { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';
import { NestContainer } from '@nestjs/core/injector/container';
import { Injector } from '@nestjs/core/injector/injector';
import { InstanceWrapper } from '@nestjs/core/injector/instance-wrapper';
import { IClientProxyFactory } from './client/client-proxy-factory';
import { ClientsContainer } from './container';
import { RpcContextCreator } from './context/rpc-context-creator';
import { CustomTransportStrategy } from './interfaces';
import { Server } from './server/server';
export declare class ListenersController {
    private readonly clientsContainer;
    private readonly contextCreator;
    private readonly container;
    private readonly injector;
    private readonly clientFactory;
    private readonly metadataExplorer;
    constructor(clientsContainer: ClientsContainer, contextCreator: RpcContextCreator, container: NestContainer, injector: Injector, clientFactory: IClientProxyFactory);
    bindPatternHandlers(instanceWrapper: InstanceWrapper<Controller>, server: Server & CustomTransportStrategy, moduleKey: string): void;
    bindClientsToProperties(instance: Controller): void;
    assignClientToInstance<T = any>(instance: Controller, property: string, client: T): void;
}
